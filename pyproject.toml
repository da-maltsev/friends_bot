[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core"]

[tool.poetry]
authors = ["Daniil Maltsev <danil.zlatoust9999@gmail.com>"]
description = ""
name = "friends-bot"
readme = "README.md"
version = "0.1.0"

[tool.poetry.dependencies]
pydantic = "^2.6.4"
pydantic-settings = "^2.2.1"
python = "^3.12"
python-telegram-bot = "^21.0.1"
pytz = "^2024.1"
redis = "^5.0.3"

[tool.poetry.group.dev.dependencies]
mypy = "^1.9.0"
pymarkdownlnt = "^0.9.18"
pytest = "^8.1.1"
pytest-asyncio = "^0.23.6"
pytest-deadfixtures = "^2.2.1"
ruff = "^0.3.5"
toml-sort = "^0.23.1"

[tool.ruff]
line-length = 160
target-version = "py311"

[tool.ruff.lint]
ignore = [
    "A001",  # variable `{}` is shadowing a Python builtin
    "A002",  # argument `{}` is shadowing a Python builtin
    "A003",  # class attribute `{}` is shadowing a Python builtin
    "ANN101",  # missing type annotation for `self` in method
    "ANN102",  # missing type annotation for `cls` in classmethod
    "ANN401",  # dynamically typed expressions (typing.Any) are disallowed in `{}`
    "ARG001",  # unused function argument: `{}`
    "COM812",  # trailing comma missing
    "COM819",  # trailing comma prohibited
    "D100",  # missing docstring in public module
    "D101",  # missing docstring in public class
    "D102",  # missing docstring in public method
    "D103",  # missing docstring in public function
    "D104",  # missing docstring in public package
    "D105",  # missing docstring in magic method
    "D106",  # missing docstring in public nested class
    "D107",  # missing docstring in `__init__`
    "D200",  # one-line docstring should fit on one line
    "D202",  # no blank lines allowed after function docstring (found {})
    "D203",  # 1 blank line required before class docstring
    "D205",  # 1 blank line required between summary line and description
    "D213",  # multi-line docstring summary should start at the second line
    "D400",  # first line should end with a period
    "D401",  # first line of docstring should be in imperative mood: "{}"
    "D415",  # first line should end with a period, question mark, or exclamation point
    "EM101",  # exception must not use a string literal, assign to variable first
    "EM102",  # expection must not use an f-string literal, assign to variable first
    "FBT001",  # boolean-typed position argument in function definition
    "FBT002",  # boolean default position argument in function definition
    "INP001",  # file `{}` is part of an implicit namespace package. Add an `__init__.py`
    "INT001",  # f-string is resolved before function call; consider `_("string %s") % arg`
    "ISC001",  # implicitly concatenated string literals on one line
    "N818",  # exception name `{}` should be named with an Error suffix
    "PERF401",  # use a list comprehension to create a transformed list
    "PGH003",  # use specific rule codes when ignoring type issues
    "PGH004",  # use specific rule codes when using `noqa`
    "PLR0913",  # too many arguments in function definition ({} > {})
    "PLR2004",  # magic value used in comparison, consider replacing {} with constant variable
    "PLR5501",  # use `elif` instead of `else` then `if` to reduce indentation
    "PLW0603",  # using the global statement to update `{}` is discouraged
    "PLW2901",  # `for` loop variable `{}` overwritten by assignment target
    "PT001",  # use `@pytest.fixture()` over `@pytest.fixture`
    "PT006",  # wrong name(s) type in `@pytest.mark.parametrize`, expected `{}`
    "PTH118",  # `os.path.join()` should be replaced by `Path` with `/` operator
    "PTH119",  # `os.path.basename()` should be replaced by `Path.name`
    "PTH120",  # `os.path.dirname()` should be replaced by `Path.parent`
    "PTH122",  # `os.path.splitext()` should be replaced by `Path.suffix`, [...]
    "PTH123",  # `open()` should be replaced by `Path.open()`
    "Q000",  # single quotes found but double quotes preferred
    "RET501",  # do not explicitly `return None` in function if it is the only possible return value
    "RET502",  # do not implicitly `return None` in function able to return non-`None` value
    "RET503",  # missing explicit `return` at the end of function able to return non-`None` value
    "RET504",  # unnecessary assignment to `{}` before `return` statement
    "RET505",  # unnecessary `else` after `return` statement
    "RSE102",  # unnecessary parentheses on raised exception
    "RUF001",  # string contains ambiguous `{}` [...]
    "RUF002",  # docstring contains ambiguous `{}` [...]
    "S101",  # use of `assert` detected
    "S324",  # probable use of insecure hash functions in `{}`: `{}`
    "TRY003",  # avoid specifying long messages outside the exception class
    "UP015",  # unnecessary open mode parameters
]
select = ["ALL"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.isort]
known-local-folder = ["apps", "core"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "ANN",  # flake8-annotations
]

[tool.tomlsort]
all = true
in_place = true
sort_first = ["tool.poetry"]
spaces_before_inline_comment = 2
spaces_indent_inline_array = 4
trailing_comma_inline_array = true
